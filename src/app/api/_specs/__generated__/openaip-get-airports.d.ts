/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/airports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns a list of airports.
         * @description Endpoint to retrieve a list of airports.
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Defines which page to return. Used with query parameter 'limit' to paginate through large result lists. Page numbers start at 1. Defaults to 1.
                     * @example 1
                     */
                    page?: number;
                    /**
                     * @description Defines maximum item count retrieved per page. Default value depends on the called API service, usually defaults to 1000.
                     * @example 100
                     */
                    limit?: number;
                    /**
                     * @description A comma separated list of field names that should be available on returned objects in the list. If not specified, all available object fields will be returned.
                     * @example _id,propertyName1,propertyName2
                     */
                    fields?: string;
                    /**
                     * @description A position defined by decimal coordinates. If set, endpoint will only return documents that are within a specific radius around the requested coordinates. Radius can be defined by using the query parameter 'dist'. If not set, endpoints will usually set a default value for the radius.
                     * @example 45.243432,9.23423
                     */
                    pos?: string;
                    /**
                     * @description Distance in meters around specified position if defined. If not set, endpoints will usually set a default value.
                     * @example 15000
                     */
                    dist?: number;
                    /**
                     * @description A comma separated list of lat/lon values that define a bound box of an area of interest (AOI). The bbox must be defined as 'minx,miny,maxx,maxy'.
                     * @example 9.0,45.0,10.0,46.0
                     */
                    bbox?: components["parameters"]["bbox"];
                    /**
                     * @description Sort query results by specified field. If set, the query parameter 'sortDesc' can be used to change sort direction. If 'sortDesc' is not set, default sort is ascending order.
                     * @example name
                     */
                    sortBy?: string;
                    /**
                     * @description Sort query results in ascending order. Only applies if 'sortBy' is set. Defaults to false.
                     * @example true
                     */
                    sortDesc?: boolean;
                    /**
                     * @description Search by ISO alpha-2 country code.
                     * @example DE
                     */
                    country?: string;
                    /**
                     * @description If true, uses leading wildcard regex to search results. This can be used to find something that 'contains' the input string. Defaults to false and uses leading wildcard search.
                     * @example true
                     */
                    searchOptLwc?: boolean;
                    /**
                     * @description A document reference ID.
                     * @example 5ffdc9dbf8c23aae8e0515b7
                     */
                    id?: string;
                    /**
                     * @description Searches and returns airports where searchable fields match the input string.Search is case-insensitive. Searchable fields are:</br><ul><li>name</li><li>icaoCode</li><li>iataCode</li><li>altIdentifier</li></ul>
                     * @example Whiskey
                     */
                    search?: string;
                    /** @description Show only airports of the provided types. */
                    type?: (0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13)[];
                    /** @description Show only airports that allow the provided traffic types. */
                    trafficType?: (0 | 1)[];
                    /** @description If true shows only airfields that are PPR. */
                    ppr?: boolean;
                    /** @description If true shows only airfields that are private. */
                    private?: boolean;
                    /** @description If true shows only airfields that are have skydive activity. */
                    skydiveActivity?: boolean;
                    /** @description If true shows only airfields that allow winch launch only. */
                    winchOnly?: boolean;
                    /** @description Only show airports that provide at least one of the provided fuel types */
                    servicesFuelType?: (0 | 1 | 2 | 3 | 4 | 5 | 6)[];
                    /** @description Only show airports that provide at least one of the provided glider towing types */
                    servicesGliderTowing?: (0 | 1 | 2 | 3 | 4 | 5)[];
                    /** @description Only show airports that provide at least one of the provided handling facilities */
                    servicesHandlingFacility?: (0 | 1 | 2 | 3 | 4)[];
                    /** @description Only show airports that provide at least one of the provided passenger facilities */
                    servicesPassengerFacility?: (0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9)[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The list of airports is returned. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["list-schema"];
                    };
                };
                /** @description Bad request. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            status: number;
                        };
                    };
                };
                /** @description Authorization information is missing or invalid. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            status: number;
                        };
                    };
                };
                /** @description Authentication was successful but client has insufficient permissions to access the resource. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            status: number;
                        };
                    };
                };
                /** @description Requested resource was not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            status: number;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            status: number;
                        };
                    };
                };
                /** @description Bad gateway or request timed out. Usually this indicates that the service is temporarily not available. */
                504: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            status: number;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Response payload of an airport instance. */
        "airport-schema": {
            /**
             * @description The document's internal reference ID value.
             * @example 60085dd4268e90000eb327ce
             */
            _id?: string;
            name?: string;
            icaoCode?: string;
            iataCode?: string;
            altIdentifier?: string;
            /**
             * @description The type of the airport. Possible values:
             *
             *      0: Airport (civil/military)
             *
             *     1: Glider Site
             *
             *     2: Airfield Civil
             *
             *     3: International Airport
             *
             *     4: Heliport Military
             *
             *     5: Military Aerodrome
             *
             *     6: Ultra Light Flying Site
             *
             *     7: Heliport Civil
             *
             *     8: Aerodrome Closed
             *
             *     9: Airport resp. Airfield IFR
             *
             *     10: Airfield Water
             *
             *     11: Landing Strip
             *
             *     12: Agricultural Landing Strip
             *
             *     13: Altiport
             * @enum {integer}
             */
            type?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13;
            /**
             * ISO 3166-1 Alpha-2 Country code
             * @description A valid 2-digit ISO country code (ISO 3166-1 alpha-2), or, an array of valid ISO codes.
             * @example DE
             */
            country?: ("AF" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "KH" | "CM" | "CA" | "CV" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IL" | "IT" | "JM" | "JP" | "JO" | "KZ" | "KE" | "KI" | "KP" | "KR" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "MP" | "MK" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "SH" | "KN" | "LC" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "SC" | "SL" | "SG" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SZ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "US" | "UM" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "AX" | "BQ" | "CW" | "GG" | "IM" | "JE" | "ME" | "BL" | "MF" | "RS" | "SX" | "SS" | "XK") | ("AF" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "KH" | "CM" | "CA" | "CV" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IL" | "IT" | "JM" | "JP" | "JO" | "KZ" | "KE" | "KI" | "KP" | "KR" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "MP" | "MK" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "SH" | "KN" | "LC" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "SC" | "SL" | "SG" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SZ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "US" | "UM" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "AX" | "BQ" | "CW" | "GG" | "IM" | "JE" | "ME" | "BL" | "MF" | "RS" | "SX" | "SS" | "XK")[];
            /** @example {
             *       "type": "Point",
             *       "coordinates": [
             *         9.1234,
             *         45.42432
             *       ]
             *     } */
            geometry?: {
                /** @enum {string} */
                type: "Point";
                coordinates: [
                    number,
                    number
                ];
            };
            elevation?: {
                value: number;
                /**
                 * @description The elevation unit. Always 'meters'.
                 * @enum {integer}
                 */
                unit: 0;
                /**
                 * @description The elevation reference datum. Always 'MSL'.
                 * @enum {integer}
                 */
                referenceDatum?: 1;
            };
            elevationGeoid?: {
                /** @description Height above ellipsoid in meters. */
                hae: number;
                /** @description Height of geoid in meters. */
                geoidHeight: number;
            };
            trafficType?: (0 | 1)[];
            magneticDeclination?: number;
            ppr?: boolean;
            private?: boolean;
            skydiveActivity?: boolean;
            winchOnly?: boolean;
            services?: {
                fuelTypes?: (0 | 1 | 2 | 3 | 4 | 5 | 6)[];
                gliderTowing?: (0 | 1 | 2 | 3 | 4 | 5)[];
                handlingFacilities?: (0 | 1 | 2 | 3 | 4)[];
                passengerFacilities?: (0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9)[];
            };
            frequencies?: {
                /**
                 * @description The document's internal reference ID value.
                 * @example 60085dd4268e90000eb327ce
                 */
                _id?: string;
                value: string;
                /**
                 * @description The frequency unit. Always 'MHz'.
                 * @enum {integer}
                 */
                unit: 2;
                /**
                 * @description The frequency type. Possible values:
                 *
                 *      0: Approach
                 *
                 *     1: APRON
                 *
                 *     2: Arrival
                 *
                 *     3: Center
                 *
                 *     4: CTAF
                 *
                 *     5: Delivery
                 *
                 *     6: Departure
                 *
                 *     7: FIS
                 *
                 *     8: Gliding
                 *
                 *     9: Ground
                 *
                 *     10: Information
                 *
                 *     11: Multicom
                 *
                 *     12: Unicom
                 *
                 *     13: Radar
                 *
                 *     14: Tower
                 *
                 *     15: ATIS
                 *
                 *     16: Radio
                 *
                 *     17: Other
                 *
                 *     18: AIRMET
                 *
                 *     19: AWOS
                 *
                 *     20: Lights
                 *
                 *     21: VOLMET
                 *
                 *     22: AFIS
                 * @enum {integer}
                 */
                type: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22;
                name?: string;
                primary: boolean;
                publicUse: boolean;
                remarks?: string;
            }[];
            runways?: {
                /**
                 * @description The document's internal reference ID value.
                 * @example 60085dd4268e90000eb327ce
                 */
                _id?: string;
                designator: string;
                trueHeading: number;
                alignedTrueNorth: boolean;
                /**
                 * @description The type of the operations. Possible values:
                 *
                 *      0: Active
                 *
                 *     1: Temporarily Closed
                 *
                 *     2: Closed
                 * @enum {integer}
                 */
                operations: 0 | 1 | 2;
                mainRunway: boolean;
                /**
                 * @description Allowed take-off/landing turn directions for this runway. Possible values:
                 *
                 *      0: Right
                 *
                 *     1: Left
                 *
                 *     2: Both
                 * @enum {integer}
                 */
                turnDirection?: 0 | 1 | 2;
                landingOnly?: boolean;
                takeOffOnly?: boolean;
                surface: {
                    composition: (0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22)[];
                    /**
                     * @description The runway main composite. Possible values:
                     *
                     *      0: Asphalt
                     *
                     *     1: Concrete
                     *
                     *     2: Grass
                     *
                     *     3: Sand
                     *
                     *     4: Water
                     *
                     *     5: Bituminous tar or asphalt ("earth cement")
                     *
                     *     6: Brick
                     *
                     *     7: Macadam or tarmac surface consisting of water-bound crushed rock
                     *
                     *     8: Stone
                     *
                     *     9: Coral
                     *
                     *     10: Clay
                     *
                     *     11: Laterite - a high iron clay formed in tropical areas
                     *
                     *     12: Gravel
                     *
                     *     13: Earth
                     *
                     *     14: Ice
                     *
                     *     15: Snow
                     *
                     *     16: Protective laminate usually made of rubber
                     *
                     *     17: Metal
                     *
                     *     18: Landing mat portable system usually made of aluminium
                     *
                     *     19: Pierced steel planking
                     *
                     *     20: Wood
                     *
                     *     21: Non Bituminous mix
                     *
                     *     22: Unknown
                     * @enum {integer}
                     */
                    mainComposite: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22;
                    /**
                     * @description The runway main composite. Possible values:
                     *
                     *      0: Good
                     *
                     *     1: Fair
                     *
                     *     2: Poor
                     *
                     *     3: Unsafe
                     *
                     *     4: Deformed
                     *
                     *     5: Unknown
                     * @enum {integer}
                     */
                    condition: 0 | 1 | 2 | 3 | 4 | 5;
                    mtow?: Record<string, never> & ({
                        value: number;
                        /**
                         * @description The maximum take-off weight permitted on the runway. Always 'tons'.
                         * @enum {integer}
                         */
                        unit: 9;
                    } | null);
                    pcn?: never | string | null;
                    remarks?: string;
                };
                dimension: {
                    length: {
                        value: number;
                        /**
                         * @description The distance unit. Always meters.
                         * @enum {integer}
                         */
                        unit: 0;
                    };
                    width: {
                        value: number;
                        /**
                         * @description The distance unit. Always meters.
                         * @enum {integer}
                         */
                        unit: 0;
                    };
                };
                declaredDistance: {
                    tora?: {
                        value: number;
                        /**
                         * @description The distance unit. Always meters.
                         * @enum {integer}
                         */
                        unit: 0;
                    };
                    toda?: {
                        value: number;
                        /**
                         * @description The distance unit. Always meters.
                         * @enum {integer}
                         */
                        unit: 0;
                    };
                    asda?: {
                        value: number;
                        /**
                         * @description The distance unit. Always meters.
                         * @enum {integer}
                         */
                        unit: 0;
                    };
                    lda?: {
                        value: number;
                        /**
                         * @description The distance unit. Always meters.
                         * @enum {integer}
                         */
                        unit: 0;
                    };
                };
                thresholdLocation?: {
                    /** @example {
                     *       "type": "Point",
                     *       "coordinates": [
                     *         9.1234,
                     *         45.42432
                     *       ]
                     *     } */
                    geometry: {
                        /** @enum {string} */
                        type: "Point";
                        coordinates: [
                            number,
                            number
                        ];
                    };
                    elevation: {
                        value: number;
                        /**
                         * @description The elevation unit. Always 'meters'.
                         * @enum {integer}
                         */
                        unit: 0;
                        /**
                         * @description The elevation reference datum. Always 'MSL'.
                         * @enum {integer}
                         */
                        referenceDatum?: 1;
                    };
                };
                exclusiveAircraftType?: (0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13)[];
                pilotCtrlLighting?: boolean;
                lightingSystem?: (0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9)[];
                visualApproachAids?: (0 | 1 | 2 | 3 | 4)[];
                instrumentApproachAids?: {
                    /**
                     * @description The document's internal reference ID value.
                     * @example 60085dd4268e90000eb327ce
                     */
                    _id?: string;
                    identifier?: string;
                    frequency: {
                        value: string;
                        /**
                         * @description The navaid frequency. Possible values:
                         *
                         *     1: kHz
                         *
                         *     2: MHz
                         * @enum {integer}
                         */
                        unit: 1 | 2;
                    };
                    channel?: string;
                    alignedTrueNorth: boolean;
                    /**
                     * @description Instrument approach type. Possible values:
                     *
                     *      0: ILS - Instrument Landing System
                     *
                     *     1: LOC - Localizer Approach
                     *
                     *     2: LDA - Localizer Type Directional Aid Approach
                     *
                     *     3: L- Locator (Compass Locator)
                     *
                     *     4: DME - Distance Measuring Equipment
                     *
                     *     5: GP - Glide Path
                     * @enum {integer}
                     */
                    type: 0 | 1 | 2 | 3 | 4 | 5;
                    /** @description Defines the hours of operation for this instrument approach aid. */
                    hoursOfOperation: {
                        operatingHours?: ({
                            /** @enum {integer} */
                            dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
                            startTime: string;
                            endTime: string;
                            /** @enum {unknown} */
                            sunrise: false;
                            /** @enum {unknown} */
                            sunset: false;
                            /** @enum {unknown} */
                            byNotam: false;
                            publicHolidaysExcluded: boolean;
                            remarks?: string;
                        } | {
                            /** @enum {integer} */
                            dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
                            startTime: string;
                            /** @enum {unknown} */
                            sunrise: false;
                            /** @enum {unknown} */
                            sunset: true;
                            /** @enum {unknown} */
                            byNotam: false;
                            publicHolidaysExcluded: boolean;
                            remarks?: string;
                        } | {
                            /** @enum {integer} */
                            dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
                            endTime: string;
                            /** @enum {unknown} */
                            sunrise: true;
                            /** @enum {unknown} */
                            sunset: false;
                            /** @enum {unknown} */
                            byNotam: false;
                            publicHolidaysExcluded: boolean;
                            remarks?: string;
                        } | {
                            /** @enum {integer} */
                            dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
                            /** @enum {unknown} */
                            sunrise: false;
                            /** @enum {unknown} */
                            sunset: false;
                            /** @enum {unknown} */
                            byNotam: false;
                            publicHolidaysExcluded: boolean;
                            remarks?: string;
                        } | {
                            /** @enum {integer} */
                            dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
                            /** @enum {unknown} */
                            sunrise: false;
                            /** @enum {unknown} */
                            sunset: false;
                            /** @enum {unknown} */
                            byNotam: true;
                            publicHolidaysExcluded: boolean;
                            remarks?: string;
                        })[];
                        remarks?: string;
                    };
                    remarks?: string;
                }[];
                remarks?: string;
            }[];
            /** @description Defines the hours of operation for this airport. */
            hoursOfOperation?: {
                operatingHours?: ({
                    /** @enum {integer} */
                    dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
                    startTime: string;
                    endTime: string;
                    /** @enum {unknown} */
                    sunrise: false;
                    /** @enum {unknown} */
                    sunset: false;
                    /** @enum {unknown} */
                    byNotam: false;
                    publicHolidaysExcluded: boolean;
                    remarks?: string;
                } | {
                    /** @enum {integer} */
                    dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
                    startTime: string;
                    /** @enum {unknown} */
                    sunrise: false;
                    /** @enum {unknown} */
                    sunset: true;
                    /** @enum {unknown} */
                    byNotam: false;
                    publicHolidaysExcluded: boolean;
                    remarks?: string;
                } | {
                    /** @enum {integer} */
                    dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
                    endTime: string;
                    /** @enum {unknown} */
                    sunrise: true;
                    /** @enum {unknown} */
                    sunset: false;
                    /** @enum {unknown} */
                    byNotam: false;
                    publicHolidaysExcluded: boolean;
                    remarks?: string;
                } | {
                    /** @enum {integer} */
                    dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
                    /** @enum {unknown} */
                    sunrise: false;
                    /** @enum {unknown} */
                    sunset: false;
                    /** @enum {unknown} */
                    byNotam: false;
                    publicHolidaysExcluded: boolean;
                    remarks?: string;
                } | {
                    /** @enum {integer} */
                    dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
                    /** @enum {unknown} */
                    sunrise: false;
                    /** @enum {unknown} */
                    sunset: false;
                    /** @enum {unknown} */
                    byNotam: true;
                    publicHolidaysExcluded: boolean;
                    remarks?: string;
                })[];
                remarks?: string;
            };
            contact?: string;
            remarks?: string;
            telephoneServices?: {
                name: string;
                phoneNumber: string;
                remarks?: string;
            }[];
            images?: {
                /**
                 * @description The document's internal reference ID value.
                 * @example 60085dd4268e90000eb327ce
                 */
                _id?: string;
                filename: string;
                description?: string;
            }[];
            /** @description UID of user that created this document. */
            createdBy?: string;
            /** @description UID of user that updated this document. */
            updatedBy?: string;
            /**
             * Format: date-time
             * @description The creation date for this document as ISO 8601 date.
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description The updated date for this document as ISO 8601 date.
             */
            updatedAt?: string;
        };
        /** @description Response schema of a paginated list of airports. */
        "list-schema": {
            /** @description The requested page. Page numbers start at 1. */
            page: number;
            /** @description The maximum items per requested page. */
            limit: number;
            /** @description The query's result total item count. */
            totalCount: number;
            /** @description The query's result total page count. */
            totalPages: number;
            /** @description The number of the next page that can be requested. If no more pages exist, nextPage is not set. */
            nextPage?: number;
            /** @description Contains the actual query result items in JSON format. */
            items: components["schemas"]["airport-schema"][];
        };
    };
    responses: never;
    parameters: {
        /**
         * @description A comma separated list of lat/lon values that define a bound box of an area of interest (AOI). The bbox must be defined as 'minx,miny,maxx,maxy'.
         * @example 9.0,45.0,10.0,46.0
         */
        bbox: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
